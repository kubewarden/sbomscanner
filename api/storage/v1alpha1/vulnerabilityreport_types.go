package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type Class string

// Enumeration of supported package classes
const (
	// Operating system packages (e.g., deb, rpm)
	ClassOSPackages = "os-pkgs"
	// Language-specific packages (e.g., npm, pip)
	ClassLangPackages = "lang-pkgs"
	// Standalone binaries not part of a package manager
	ClassBinary = "binary"
)

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// VulnerabilityReportList contains a list of ScanResult
type VulnerabilityReportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
	Items           []VulnerabilityReport `json:"items" protobuf:"bytes,2,rep,name=items"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:selectablefield:JSONPath=`.imageMetadata.registry`
// +kubebuilder:selectablefield:JSONPath=`.imageMetadata.registryURI`
// +kubebuilder:selectablefield:JSONPath=`.imageMetadata.repository`
// +kubebuilder:selectablefield:JSONPath=`.imageMetadata.tag`
// +kubebuilder:selectablefield:JSONPath=`.imageMetadata.platform`
// +kubebuilder:selectablefield:JSONPath=`.imageMetadata.digest`

// VulnerabilityReport is the Schema for the scanresults API
type VulnerabilityReport struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`

	// ImageMetadata contains info about the scanned image
	ImageMetadata ImageMetadata `json:"imageMetadata" protobuf:"bytes,2,req,name=imageMetadata"`

	// Report is the actual vulnerability scan report
	Report Report `json:"report" protobuf:"bytes,3,req,name=report"`
}

// Report contains metadata about the scanned image and a list of vulnerability results.
type Report struct {
	// Summary of vulnerabilities found
	Summary Summary `json:"summary" protobuf:"bytes,1,req,name=summary"`

	// Results per target (e.g., layer, package type)
	Results []Result `json:"results" protobuf:"bytes,2,rep,name=results"`
}

// Summary provides a high-level overview of the vulnerabilities found.
type Summary struct {
	// Critical vulnerabilities count
	Critical int `json:"critical" protobuf:"varint,1,req,name=critical"`

	// High vulnerabilities count
	High int `json:"high" protobuf:"varint,2,req,name=high"`

	// Medium vulnerabilities count
	Medium int `json:"medium" protobuf:"varint,3,req,name=medium"`

	// Low vulnerabilities count
	Low int `json:"low" protobuf:"varint,4,req,name=low"`

	// Unknown vulnerabilities count
	Unknown int `json:"unknown" protobuf:"varint,5,req,name=unknown"`

	// Suppressed vulnerabilities count
	Suppressed int `json:"suppressed" protobuf:"varint,6,req,name=suppressed"`
}

// Result represents scan findings for a specific target and class of packages
type Result struct {
	// Target is the specific target scanned
	Target string `json:"target" protobuf:"bytes,1,req,name=target"`

	// Class is the classification of the target
	Class Class `json:"class" protobuf:"bytes,2,req,name=class"`

	// Type is the language type
	Type string `json:"type" protobuf:"bytes,3,req,name=type"`

	// Vulnerabilities found in this target
	Vulnerabilities []Vulnerability `json:"vulnerabilities" protobuf:"bytes,4,rep,name=vulnerabilities"`
}

// CVSS holds Common Vulnerability Scoring System data for a vulnerability.
type CVSS struct {
	// V3Vector string (e.g., "AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H")
	V3Vector string `json:"v3vector" protobuf:"bytes,1,req,name=v3vector"`

	// V3Score numerical score
	V3Score string `json:"v3score" protobuf:"bytes,2,req,name=v3score"`
}

// VEXStatus represents the status of a vulnerability as declared
// in a VEX document
type VEXStatus struct {
	// Repository providing the VEX document
	Repository string `json:"repository" protobuf:"bytes,1,req,name=repository"`

	// VEX status (e.g., "not_affected", "fixed", "under_investigation")
	Status string `json:"status" protobuf:"bytes,2,req,name=status"`

	// Statement optionally explain statement from the VEX document
	Statement string `json:"statement" protobuf:"bytes,3,req,name=statement"`
}

// Vulnerability contains detailed information about a single vulnerability
// found in a package
type Vulnerability struct {
	// CVE identifier
	CVE string `json:"cve" protobuf:"bytes,1,req,name=cve"`

	// Title is the title of the vulnerability
	Title string `json:"title,omitempty" protobuf:"bytes,2,opt,name=title"`

	// PackageName is the name of the vulnerable package
	// (empty when Class is "binary")
	PackageName string `json:"packageName,omitempty" protobuf:"bytes,3,opt,name=packageName"`

	// PackagePath is the path where the package was found
	// (equal to Target when Class is "binary").
	// trivy removes the "/" at the beginning of the path
	// so we have to restore it.
	PackagePath string `json:"packagePath,omitempty" protobuf:"bytes,4,opt,name=packagePath"`

	// PURL (Package URL) identify the package uniquely
	PURL string `json:"purl" protobuf:"bytes,5,req,name=purl"`

	// InstalledVersion of the package that was found
	InstalledVersion string `json:"installedVersion" protobuf:"bytes,6,req,name=installedVersion"`

	// FixedVersions is the list of versions where the vulnerability is fixed
	FixedVersions []string `json:"fixedVersions,omitempty" protobuf:"bytes,7,rep,name=fixedVersions"`

	// DiffID of the image layer where the vulnerability was introduced
	DiffID string `json:"diffID" protobuf:"bytes,8,req,name=diffID"`

	// Description of the vulnerability
	Description string `json:"description,omitempty" protobuf:"bytes,9,opt,name=description"`

	// Severity rating (e.g., "HIGH", "MEDIUM")
	Severity string `json:"severity" protobuf:"bytes,10,req,name=severity"`

	// References contains URLs for more information
	References []string `json:"references,omitempty" protobuf:"bytes,11,rep,name=references"`

	// CVSS scoring details
	CVSS map[string]CVSS `json:"cvss,omitempty" protobuf:"bytes,12,rep,name=cvss"`

	// Suppressed identify when vulnerability has
	// been suppressed by VEX documents
	Suppressed bool `json:"suppressed" protobuf:"varint,13,req,name=suppressed"`

	// VEXStatus information
	VEXStatus *VEXStatus `json:"vexStatus,omitempty" protobuf:"bytes,14,opt,name=vexStatus"`
}

func (v *VulnerabilityReport) GetImageMetadata() ImageMetadata {
	return v.ImageMetadata
}
