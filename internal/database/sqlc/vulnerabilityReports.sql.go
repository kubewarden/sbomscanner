// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: vulnerabilityReports.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
)

const countVulnerabilityReport = `-- name: CountVulnerabilityReport :one
SELECT COUNT(*) FROM vulnerabilityreports
`

func (q *Queries) CountVulnerabilityReport(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countVulnerabilityReport)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countVulnerabilityReportByNamespace = `-- name: CountVulnerabilityReportByNamespace :one
SELECT COUNT(*) FROM vulnerabilityreports WHERE namespace = $1
`

func (q *Queries) CountVulnerabilityReportByNamespace(ctx context.Context, namespace string) (int64, error) {
	row := q.db.QueryRow(ctx, countVulnerabilityReportByNamespace, namespace)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createVulnerabilityReport = `-- name: CreateVulnerabilityReport :execresult
INSERT INTO vulnerabilityreports (
  name, namespace, object
) VALUES (
  $1, $2, $3
)
ON CONFLICT DO NOTHING
`

type CreateVulnerabilityReportParams struct {
	Name      string
	Namespace string
	Object    string
}

func (q *Queries) CreateVulnerabilityReport(ctx context.Context, arg CreateVulnerabilityReportParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, createVulnerabilityReport, arg.Name, arg.Namespace, arg.Object)
}

const createVulnerabilityReportsTable = `-- name: CreateVulnerabilityReportsTable :exec
CREATE TABLE IF NOT EXISTS vulnerabilityreports (
    id bigint GENERATED ALWAYS AS IDENTITY,
    name VARCHAR(253) NOT NULL,
    namespace VARCHAR(253) NOT NULL,
    object TEXT NOT NULL,
    UNIQUE(name, namespace)
)
`

func (q *Queries) CreateVulnerabilityReportsTable(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createVulnerabilityReportsTable)
	return err
}

const deleteVulnerabilityReport = `-- name: DeleteVulnerabilityReport :one
DELETE FROM vulnerabilityreports
WHERE name = $1 AND namespace = $2
RETURNING id, name, namespace, object
`

type DeleteVulnerabilityReportParams struct {
	Name      string
	Namespace string
}

func (q *Queries) DeleteVulnerabilityReport(ctx context.Context, arg DeleteVulnerabilityReportParams) (Vulnerabilityreport, error) {
	row := q.db.QueryRow(ctx, deleteVulnerabilityReport, arg.Name, arg.Namespace)
	var i Vulnerabilityreport
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Namespace,
		&i.Object,
	)
	return i, err
}

const getVulnerabilityReport = `-- name: GetVulnerabilityReport :one
SELECT id, name, namespace, object FROM vulnerabilityreports
WHERE name = $1 AND namespace = $2
`

type GetVulnerabilityReportParams struct {
	Name      string
	Namespace string
}

func (q *Queries) GetVulnerabilityReport(ctx context.Context, arg GetVulnerabilityReportParams) (Vulnerabilityreport, error) {
	row := q.db.QueryRow(ctx, getVulnerabilityReport, arg.Name, arg.Namespace)
	var i Vulnerabilityreport
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Namespace,
		&i.Object,
	)
	return i, err
}

const listVulnerabilityReport = `-- name: ListVulnerabilityReport :many
SELECT id, name, namespace, object FROM vulnerabilityreports
`

func (q *Queries) ListVulnerabilityReport(ctx context.Context) ([]Vulnerabilityreport, error) {
	rows, err := q.db.Query(ctx, listVulnerabilityReport)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vulnerabilityreport
	for rows.Next() {
		var i Vulnerabilityreport
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Namespace,
			&i.Object,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listVulnerabilityReportByNamespace = `-- name: ListVulnerabilityReportByNamespace :many
SELECT id, name, namespace, object FROM vulnerabilityreports WHERE namespace = $1
`

func (q *Queries) ListVulnerabilityReportByNamespace(ctx context.Context, namespace string) ([]Vulnerabilityreport, error) {
	rows, err := q.db.Query(ctx, listVulnerabilityReportByNamespace, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vulnerabilityreport
	for rows.Next() {
		var i Vulnerabilityreport
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Namespace,
			&i.Object,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVulnerabilityReport = `-- name: UpdateVulnerabilityReport :exec
UPDATE vulnerabilityreports
SET object = $1
WHERE name = $2 AND namespace = $3
`

type UpdateVulnerabilityReportParams struct {
	Object    string
	Name      string
	Namespace string
}

func (q *Queries) UpdateVulnerabilityReport(ctx context.Context, arg UpdateVulnerabilityReportParams) error {
	_, err := q.db.Exec(ctx, updateVulnerabilityReport, arg.Object, arg.Name, arg.Namespace)
	return err
}
