// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: image.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
)

const countImages = `-- name: CountImages :one
SELECT COUNT(*) FROM images
`

func (q *Queries) CountImages(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countImages)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countImagesByNamespace = `-- name: CountImagesByNamespace :one
SELECT COUNT(*) FROM images WHERE namespace = $1
`

func (q *Queries) CountImagesByNamespace(ctx context.Context, namespace string) (int64, error) {
	row := q.db.QueryRow(ctx, countImagesByNamespace, namespace)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createImage = `-- name: CreateImage :execresult
INSERT INTO images (
  name, namespace, object
) VALUES (
  $1, $2, $3
)
ON CONFLICT DO NOTHING
`

type CreateImageParams struct {
	Name      string
	Namespace string
	Object    string
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, createImage, arg.Name, arg.Namespace, arg.Object)
}

const createImageTable = `-- name: CreateImageTable :exec
CREATE TABLE IF NOT EXISTS images (
    id bigint GENERATED ALWAYS AS IDENTITY,
    name VARCHAR(253) NOT NULL,
    namespace VARCHAR(253) NOT NULL,
    object TEXT NOT NULL,
    UNIQUE(name, namespace)
)
`

func (q *Queries) CreateImageTable(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createImageTable)
	return err
}

const deleteImage = `-- name: DeleteImage :one
DELETE FROM images
WHERE name = $1 AND namespace = $2
RETURNING id, name, namespace, object
`

type DeleteImageParams struct {
	Name      string
	Namespace string
}

func (q *Queries) DeleteImage(ctx context.Context, arg DeleteImageParams) (Image, error) {
	row := q.db.QueryRow(ctx, deleteImage, arg.Name, arg.Namespace)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Namespace,
		&i.Object,
	)
	return i, err
}

const getImage = `-- name: GetImage :one
SELECT id, name, namespace, object FROM images
WHERE name = $1 AND namespace = $2
`

type GetImageParams struct {
	Name      string
	Namespace string
}

func (q *Queries) GetImage(ctx context.Context, arg GetImageParams) (Image, error) {
	row := q.db.QueryRow(ctx, getImage, arg.Name, arg.Namespace)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Namespace,
		&i.Object,
	)
	return i, err
}

const listImages = `-- name: ListImages :many
SELECT id, name, namespace, object FROM images
`

func (q *Queries) ListImages(ctx context.Context) ([]Image, error) {
	rows, err := q.db.Query(ctx, listImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Namespace,
			&i.Object,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listImagesByNamespace = `-- name: ListImagesByNamespace :many
SELECT id, name, namespace, object FROM images WHERE namespace = $1
`

func (q *Queries) ListImagesByNamespace(ctx context.Context, namespace string) ([]Image, error) {
	rows, err := q.db.Query(ctx, listImagesByNamespace, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Namespace,
			&i.Object,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImage = `-- name: UpdateImage :exec
UPDATE images
SET object = $1
WHERE name = $2 AND namespace = $3
`

type UpdateImageParams struct {
	Object    string
	Name      string
	Namespace string
}

func (q *Queries) UpdateImage(ctx context.Context, arg UpdateImageParams) error {
	_, err := q.db.Exec(ctx, updateImage, arg.Object, arg.Name, arg.Namespace)
	return err
}
