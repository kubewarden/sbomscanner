// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sbom.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
)

const countSbom = `-- name: CountSbom :one
SELECT COUNT(*) FROM sboms
`

func (q *Queries) CountSbom(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countSbom)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSbomByNamespace = `-- name: CountSbomByNamespace :one
SELECT COUNT(*) FROM sboms WHERE namespace = $1
`

func (q *Queries) CountSbomByNamespace(ctx context.Context, namespace string) (int64, error) {
	row := q.db.QueryRow(ctx, countSbomByNamespace, namespace)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSbom = `-- name: CreateSbom :execresult
INSERT INTO sboms (
  name, namespace, object
) VALUES (
  $1, $2, $3
)
ON CONFLICT DO NOTHING
`

type CreateSbomParams struct {
	Name      string
	Namespace string
	Object    string
}

func (q *Queries) CreateSbom(ctx context.Context, arg CreateSbomParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, createSbom, arg.Name, arg.Namespace, arg.Object)
}

const createSbomTable = `-- name: CreateSbomTable :exec
CREATE TABLE IF NOT EXISTS sboms (
    id bigint GENERATED ALWAYS AS IDENTITY,
    name VARCHAR(253) NOT NULL,
    namespace VARCHAR(253) NOT NULL,
    object TEXT NOT NULL,
    UNIQUE(name, namespace)
)
`

func (q *Queries) CreateSbomTable(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createSbomTable)
	return err
}

const deleteSbom = `-- name: DeleteSbom :one
DELETE FROM sboms
WHERE name = $1 AND namespace = $2
RETURNING id, name, namespace, object
`

type DeleteSbomParams struct {
	Name      string
	Namespace string
}

func (q *Queries) DeleteSbom(ctx context.Context, arg DeleteSbomParams) (Sbom, error) {
	row := q.db.QueryRow(ctx, deleteSbom, arg.Name, arg.Namespace)
	var i Sbom
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Namespace,
		&i.Object,
	)
	return i, err
}

const getSbom = `-- name: GetSbom :one
SELECT id, name, namespace, object FROM sboms
WHERE name = $1 AND namespace = $2
`

type GetSbomParams struct {
	Name      string
	Namespace string
}

func (q *Queries) GetSbom(ctx context.Context, arg GetSbomParams) (Sbom, error) {
	row := q.db.QueryRow(ctx, getSbom, arg.Name, arg.Namespace)
	var i Sbom
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Namespace,
		&i.Object,
	)
	return i, err
}

const listSbom = `-- name: ListSbom :many
SELECT id, name, namespace, object FROM sboms
`

func (q *Queries) ListSbom(ctx context.Context) ([]Sbom, error) {
	rows, err := q.db.Query(ctx, listSbom)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sbom
	for rows.Next() {
		var i Sbom
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Namespace,
			&i.Object,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSbomByNamespace = `-- name: ListSbomByNamespace :many
SELECT id, name, namespace, object FROM sboms WHERE namespace = $1
`

func (q *Queries) ListSbomByNamespace(ctx context.Context, namespace string) ([]Sbom, error) {
	rows, err := q.db.Query(ctx, listSbomByNamespace, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sbom
	for rows.Next() {
		var i Sbom
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Namespace,
			&i.Object,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSbom = `-- name: UpdateSbom :exec
UPDATE sboms
SET object = $1
WHERE name = $2 AND namespace = $3
`

type UpdateSbomParams struct {
	Object    string
	Name      string
	Namespace string
}

func (q *Queries) UpdateSbom(ctx context.Context, arg UpdateSbomParams) error {
	_, err := q.db.Exec(ctx, updateSbom, arg.Object, arg.Name, arg.Namespace)
	return err
}
