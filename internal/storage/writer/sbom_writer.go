package writer

import (
	"context"
	"fmt"

	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/rancher/sbombastic/internal/database/sqlc"
)

type SbomWriter struct {
	db      *pgxpool.Pool
	queries *sqlc.Queries
}

// NOTE: Keep this struct lightweight; the pgx pool is concurrencyâ€‘safe.

// NewSbomWriter constructs a SbomWriter bound to a pgx connection
// pool. Keeping this in a helper allows easy injection/mocking in
// tests.
func NewSbomWriter(pool *pgxpool.Pool) *SbomWriter {
	return &SbomWriter{db: pool, queries: sqlc.New(pool)}
}

// Create inserts (name, namespace, rawJSON) into the sboms table.
// The SQL is generated by sqlc; ensure your query is annotated as
// `-- name: CreateSbom :execresult` so that it returns a CommandTag.
func (w *SbomWriter) Create(ctx context.Context, name, namespace string, raw []byte) (int64, error) {
	tag, err := w.queries.CreateSbom(ctx, sqlc.CreateSbomParams{
		Name:      name,
		Namespace: namespace,
		Object:    string(raw),
	})
	if err != nil {
		return 0, fmt.Errorf("create sbom: %w", err)
	}
	return tag.RowsAffected(), nil
}

// Delete deletes the sbom from the database and returns the deleted object data.
func (w *SbomWriter) Delete(ctx context.Context, name, namespace string) ([]byte, error) {
	sbom, err := w.queries.DeleteSbom(ctx, sqlc.DeleteSbomParams{
		Name:      name,
		Namespace: namespace,
	})
	if err != nil {
		return nil, fmt.Errorf("delete sbom: %w", err)
	}
	return []byte(sbom.Object), nil
}

// Get retrieves a sbom from the database.
func (w *SbomWriter) Get(ctx context.Context, name, namespace string) (string, error) {
	sbom, err := w.queries.GetSbom(ctx, sqlc.GetSbomParams{
		Name:      name,
		Namespace: namespace,
	})
	if err != nil {
		return "", fmt.Errorf("get sbom: %w", err)
	}
	return sbom.Object, nil
}

// List retrieves all sboms from the database.
func (w *SbomWriter) List(ctx context.Context, namespace string) ([]string, error) {
	var sboms []sqlc.Sbom
	var err error

	if namespace == "" {
		sboms, err = w.queries.ListSbom(ctx)
	} else {
		sboms, err = w.queries.ListSbomByNamespace(ctx, namespace)
	}
	if err != nil {
		return nil, fmt.Errorf("list sboms: %w", err)
	}

	var objects []string
	for _, sbom := range sboms {
		objects = append(objects, sbom.Object)
	}
	return objects, nil
}

// Update updates a sbom in the database.
func (w *SbomWriter) Update(ctx context.Context, name, namespace string, raw []byte) (int64, error) {
	err := w.queries.UpdateSbom(ctx, sqlc.UpdateSbomParams{
		Object:    string(raw),
		Name:      name,
		Namespace: namespace,
	})
	if err != nil {
		return 0, fmt.Errorf("update sbom: %w", err)
	}
	return 1, nil // UpdateSbom doesn't return rows affected, so we assume 1
}

// Count returns the number of sboms in the database.
func (w *SbomWriter) Count(ctx context.Context, namespace string) (int64, error) {
	var sbomCount int64
	var err error
	if namespace == "" {
		sbomCount, err = w.queries.CountSbom(ctx)
	} else {
		sbomCount, err = w.queries.CountSbomByNamespace(ctx, namespace)
	}
	if err != nil {
		return 0, fmt.Errorf("count sboms: %w", err)
	}
	return sbomCount, nil
}
